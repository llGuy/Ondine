#version 450

#include "Sky.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform PlanetUniform {
  PlanetProperties sky;
} uSky;

layout(set = 1, binding = 0, rgba16f) uniform image3D uDeltaMultipleScattering;
layout(set = 2, binding = 0, rgba16f) uniform image3D uScattering;

layout (set = 3, binding = 0) uniform sampler2D uTransmittance;
layout (set = 4, binding = 0) uniform sampler3D uScatteringDensity;

layout(push_constant) uniform PushConstant {
  int layer;
  int scatteringOrder;
  int depthOffset;
  int depthSize;
} uPushConstant;

void main() {
  ivec3 extent = ivec3(
      SCATTERING_TEXTURE_WIDTH,
      SCATTERING_TEXTURE_HEIGHT,
      SCATTERING_TEXTURE_DEPTH);

  /* gl_GlobalInvocationID is always going to be between
   * vec3(0) -> vec3(width, height, depthSize)
   * We need to get it to:
   *
   * vec3(0, 0, depthOffset) -> vec3(width, height, depthOffset + depthSize)
   */
  ivec3 pixelCoords = ivec3(gl_GlobalInvocationID.xyz);
  pixelCoords.z += uPushConstant.depthOffset;

  if (pixelCoords.x < extent.x && pixelCoords.y < extent.y && pixelCoords.z < extent.z) {
    float nu;
    vec3 outDeltaMultipleScattering = computeMultipleScatteringTexture(
        uSky.sky, uTransmittance, uScatteringDensity,
        vec3(pixelCoords) + vec3(0.5),
        nu);

    vec4 outScattering = vec4(
        outDeltaMultipleScattering.rgb / rayleighPhase(nu),
        0.0);

    imageStore(uDeltaMultipleScattering, pixelCoords, vec4(outDeltaMultipleScattering, 1.0));

    vec3 prevScattering = imageLoad(uScattering, pixelCoords).rgb;
    outScattering.rgb += prevScattering;

    imageStore(uScattering, pixelCoords, outScattering);
  }
}
